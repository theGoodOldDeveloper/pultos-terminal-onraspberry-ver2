//HACK             OOOOOOOKKKKKKKK                //
//HACK             state.kosarak listener                //
$(".termekButton").click(function () {
  if (beforStateGroceryValue != state.kosarak.length) {
    console.log("Termek gombra nyomva lett");
    console.log("state.kosarak", state.kosarak);
    console.log("state.kosarak.length", state.kosarak.length);
    console.log("beforStateGroceryValue", beforStateGroceryValue);
    beforStateGroceryValue = state.kosarak.length;
    kosarakTest();
  } else {
    console.log("state.kosarak.length", state.kosarak.length);
    console.log("beforStateGroceryValue", beforStateGroceryValue);
    kosarakTest();
  }
});
function kosarakTest() {
  console.log("kosarakTest lefutott !!!!! ğŸ˜ˆğŸ˜ˆğŸ˜ˆğŸ˜ˆğŸ˜ˆ");
}
//HACK             state.kosarak listener                //
//HACK             state.kosarak listener                //
//HACK             state.kosarak listener                //
//HACK             state.kosarak listener                //
// VegyÃ¼k fel, hogy van egy state objektum, amiben a kosarakat tÃ¡roljuk

// DefiniÃ¡ljuk a kosarakTest() funkciÃ³t, amit akkor hajtunk vÃ©gre, ha a kosarak Ã©rtÃ©ke megvÃ¡ltozik
function kosarakTest() {
  console.log("A kosarak Ã©rtÃ©ke megvÃ¡ltozott!");
  console.log("A kosarak tartalma: " + stateProxy.kosarak.length);
  // Ide Ã­rhatod a tovÃ¡bbi mÅ±veleteket vagy logikÃ¡t
}

// Hozz lÃ©tre egy Proxy-t a state objektumhoz, hogy figyeljÃ¼k a vÃ¡ltozÃ¡sokat
const stateProxy = new Proxy(state, {
  set(target, property, value) {
    // ElÅ‘szÃ¶r Ã¡llÃ­tsd be az Ã©rtÃ©ket a state objektumban
    target[property] = value;
    // Majd hajtsd vÃ©gre a kosarakTest() funkciÃ³t
    kosarakTest();
    return true;
  },
});

// Most Ã¡llÃ­tsuk be a kosarak Ã©rtÃ©kÃ©t
stateProxy.kosarak = [...state.kosarak]; // Ez meghÃ­vja a kosarakTest() funkciÃ³t

// Most vÃ¡ltoztassuk meg a kosarak Ã©rtÃ©kÃ©t
//stateProxy.kosarak.push('barack'); // Ez is meghÃ­vja a kosarakTest() funkciÃ³t

//HACK             state.kosarak listener                //
//HACK             state.kosarak listener                //
stateProxy.kosarak = [...state.kosarak];
//HACK             state.kosarak listener                //
//HACK             state.kosarak listener                //
//HACK             state.kosarak listener                //
function kosarakTest() {
  console.log("kosarakTest lefutott !!!!! ğŸ˜ˆğŸ˜ˆğŸ˜ˆğŸ˜ˆğŸ˜ˆ");
}
const kosarValtozottEvent = new Event("kosarValtozott");
document.dispatchEvent(kosarValtozottEvent);
document.addEventListener("kosarValtozottEvent", kosarakTest());
/* document.addEventListener("kosarValtozottEvent", kosarakTarol); */
//HACK             state.kosarak listener                //

const state = {
  kosar: [],
};

const kosarValtozottEsemÃ©ny = new CustomEvent("kosarValtozott");

function kosarakMent() {
  // ... A kosarak mentÃ©se a hÃ¡ttÃ©rtÃ¡rba ...
  console.log("A kosarak mentve lettek!");
}

// KosÃ¡r mÃ³dosÃ­tÃ¡sa
state.kosar.push({
  nev: "TermÃ©k 1",
  ar: 1000,
});

document.dispatchEvent(kosarValtozottEsemÃ©ny);

// FeliratkozÃ¡s a kosÃ¡r vÃ¡ltozÃ¡sÃ¡ra
document.addEventListener("kosarValtozott", kosarakMent);
//HACK             state.kosarak listener                //
const state = {
  kosar: [],
};

const proxy = new Proxy(state.kosar, {
  set: function (target, property, value) {
    target[property] = value;
    kosarakMent(); // A kosarakMent() fÃ¼ggvÃ©ny meghÃ­vÃ¡sa
  },
});

function kosarakMent() {
  // ... A kosarak mentÃ©se a hÃ¡ttÃ©rtÃ¡rba ...
  console.log("A kosarak mentve lettek!");
}

// KosÃ¡r mÃ³dosÃ­tÃ¡sa
proxy.push({
  nev: "TermÃ©k 1",
  ar: 1000,
});

// A konzol kiÃ­rja: "A kosarak mentve lettek!"

//HACK             state.kosarak listener                //
